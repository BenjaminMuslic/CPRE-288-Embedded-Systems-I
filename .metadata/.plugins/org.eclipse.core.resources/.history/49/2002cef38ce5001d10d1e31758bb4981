/*
 * @file commands.c
 * @author Halle Northway, Micale Robeson, Megan Boyd, Zach Harvey
 */

#include <commands.h>
#include "open_interface.h"
#include "Timer.h"
#include "lcd.h"
#include "uart-interrupt.h"
#include "servo.h"
#include "ping_template.h"
#include "adc.h"

typedef struct {
    int raw_ir;
    double ir_dist;
    double ping_dist;
    int angle;
    int num;
} obj;

/**
 *
 * Move Roomba forward a given distance. Checks
 * for boundary lines, ciffs, and object collision.
 *
 */

double move_forward(oi_t *sensor_data, double distance_cm) {
    double sum = 0;
    int bump, boundary, cliff;
    char data[200] = {};
    //double og = sensor_data -> distance;

    uart_sendStr("\rMoving forward.\n\r");

     while (sum < distance_cm) {

        oi_setWheels(75, 75);
        oi_update(sensor_data);
        sum += sensor_data -> distance;

        /////////////// FIXME: DELETE LATER ////////////////
        sprintf(data, "Distance (in cm): %lf\n\r", sum);
        uart_sendStr(data);
        /////////////// DELETE LATER ////////////////

        // Check for bumps.
        bump = check_bump(sensor_data);

        if (bump == 1) {
            oi_setWheels(0,0);
            char* warning = ("Hit on left bumper!\n\r");
            uart_sendStr(warning);
            break;
        } else if (bump == 2) {
            oi_setWheels(0,0);
            char* warning = ("Hit on right bumper!\n\r");
            uart_sendStr(warning);
            break;
        }

        // Check for boundaries.
        boundary = check_boundary(sensor_data);

        if (boundary == 1) {
            oi_setWheels(0,0);
            char* warning = ("Boundary line on front left side!\n\r");
            uart_sendStr(warning);
            break;
        } else if (boundary == 2) {
            oi_setWheels(0,0);
            char* warning = ("Boundary line on front right side!\n\r");
            uart_sendStr(warning);
            break;
        } else if (boundary == 3) {
            oi_setWheels(0,0);
            char* warning = ("Boundary line on left side!\n\r");
            uart_sendStr(warning);
            break;
        } else if (boundary == 4) {
            oi_setWheels(0,0);
            char* warning = ("Boundary line on right side!\n\r");
            uart_sendStr(warning);
            break;
        }

        // Check for cliffs.
        cliff = check_cliff(sensor_data);

        if (cliff == 1) {
            oi_setWheels(0,0);
            char* warning = ("Cliff on front left side!\n\r");
            uart_sendStr(warning);
            break;
        } else if (cliff == 2) {
            oi_setWheels(0,0);
            char* warning = ("Cliff on front right side!\n\r");
            uart_sendStr(warning);
            break;
        } else if (cliff == 3) {
            oi_setWheels(0,0);
            char* warning = ("Cliff on left side!\n\r");
            uart_sendStr(warning);
            break;
        } else if (cliff == 4) {
            oi_setWheels(0,0);
            char* warning = ("Cliff on right side!\n\r");
            uart_sendStr(warning);
            break;
        }

        timer_waitMillis(100);

        // TODO: Test values for boundary detection. Comment out when don't need.
        lcd_printf("L: %d, FL: %d,\nFR: %d, R: %d", sensor_data->cliffLeftSignal, sensor_data->cliffFrontLeftSignal, sensor_data->cliffFrontRightSignal, sensor_data->cliffRightSignal);

     }

    oi_setWheels(0, 0);
//    oi_free(sensor_data);

    return sum;
}

/**
 *
 * Move Roomba forward indefinitely. Checks
 * for boundary lines, ciffs, and object collision.
 *
 */
int move_forward_manual(oi_t *sensor_data) {
    int bump, boundary, cliff;
    oi_setWheels(75, 75);
    int br = 0;

    uart_sendStr("\rMoving forward.\n\r");

    while (br == 0) {

         oi_update(sensor_data);

         // If UART receives key other than 'W', go back to main.
         if (command_flag != 2) {
             br = 1;
             return command_flag;
         } else {

            // Check for bumps.
            bump = check_bump(sensor_data);

            if (bump == 1) {
                oi_setWheels(0,0);
                char* warning = ("Hit on left bumper!\n\r");
                uart_sendStr(warning);
                br = 1;
            } else if (bump == 2) {
                oi_setWheels(0,0);
                char* warning = ("Hit on right bumper!\n\r");
                uart_sendStr(warning);
                br = 1;
            }

            // Check for boundaries.
            boundary = check_boundary(sensor_data);

            if (boundary == 1) {
                oi_setWheels(0,0);
                char* warning = ("Boundary line on front left side!\n\r");
                uart_sendStr(warning);
                br = 1;
            } else if (boundary == 2) {
                oi_setWheels(0,0);
                char* warning = ("Boundary line on front right side!\n\r");
                uart_sendStr(warning);
                br = 1;
            } else if (boundary == 3) {
                oi_setWheels(0,0);
                char* warning = ("Boundary line on left side!\n\r");
                uart_sendStr(warning);
                br = 1;
            } else if (boundary == 4) {
                oi_setWheels(0,0);
                char* warning = ("Boundary line on right side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }

            // Check for cliffs.
            cliff = check_cliff(sensor_data);

            if (cliff == 1) {
                oi_setWheels(0,0);
                char* warning = ("Cliff on front left side!\n\r");
                uart_sendStr(warning);
                br = 1;
            } else if (cliff == 2) {
                oi_setWheels(0,0);
                char* warning = ("Cliff on front right side!\n\r");
                uart_sendStr(warning);
                br = 1;
            } else if (cliff == 3) {
                oi_setWheels(0,0);
                char* warning = ("Cliff on left side!\n\r");
                uart_sendStr(warning);
                br = 1;
            } else if (cliff == 4) {
                oi_setWheels(0,0);
                char* warning = ("Cliff on right side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
         }

         timer_waitMillis(100);

        // TODO: Test values for boundary detection. Comment out when don't need.
        // lcd_printf("L: %d, FL: %d,\nFR: %d, R: %d", sensor_data->cliffLeftSignal, sensor_data->cliffFrontLeftSignal, sensor_data->cliffFrontRightSignal, sensor_data->cliffRightSignal);
     }
     return 0;
}

/**
 *
 * Move Roomba backward a given distance.
 *
 */
double move_backward(oi_t *sensor_data, double distance_cm){
    double sum = 0;
    char data[200] = {};

    uart_sendStr("\rMoving backward.\n\r");

    while (sum > distance_cm) {

        oi_setWheels(-75, -75);
        oi_update(sensor_data);
        sum += sensor_data -> distance;

        /////////////// FIXME: DELETE LATER ////////////////
        sprintf(data, "Distance (in cm): %lf\n\r", sum);
        uart_sendStr(data);
        /////////////// DELETE LATER ////////////////
    }

    oi_setWheels(0, 0);
    oi_free(sensor_data);

    return sum;
}

/**
 *
 * Move Roomba backward indefinitely.
 *
 */
void move_backward_manual(oi_t *sensor_data) {
    uart_sendStr("\rMoving backward.\n\r");
    oi_setWheels(-75, -75);
    timer_waitMillis(100);

}

/**
 *
 * Turn Roomba to the left.
 *
 */
double turn_left(oi_t *sensor_data, double degrees) {
    double sum = 0;
    char data[200] = {};

    uart_sendStr("\rTurning to the left.\n\r");

    while (sum < degrees) {

        oi_setWheels(50, -50);
        oi_update(sensor_data);
        sum += sensor_data -> angle;

        /////////////// FIXME: DELETE LATER ////////////////
        sprintf(data, "Angle (in deg): %lf\n\r", sum);
        uart_sendStr(data);
        /////////////// DELETE LATER ////////////////
    }

    oi_setWheels(0, 0);

    return sum;
}

/**
 *
 * Turn Roomba to the left indefinitely.
 *
 */
void turn_left_manual(oi_t *sensor_data) {
    uart_sendStr("\rTurning to the left.\n\r");
    oi_setWheels(50, -50);
    timer_waitMillis(100);
}

/**
 *
 * Turn Roomba to the right.
 *
 */
double turn_right(oi_t *sensor_data, double degrees){
    double sum = 0;
    char data[200] = {};

    uart_sendStr("\rTurning to the right.\n\r");

    while (sum > degrees) {

        oi_setWheels(-50, 50);
        oi_update(sensor_data);
        sum += sensor_data -> angle;

        /////////////// FIXME: DELETE LATER ////////////////
        sprintf(data, "Angle (in deg): %lf\n\r", sum);
        uart_sendStr(data);
        /////////////// DELETE LATER ////////////////
    }

    oi_setWheels(0, 0);

    return sum;
}

/**
 *
 * Turn Roomba to the right indefinitely.
 *
 */
void turn_right_manual(oi_t *sensor_data) {
    uart_sendStr("\rTurning to the right.\n\r");
    oi_setWheels(-50, 50);
    timer_waitMillis(100);
}

/**
 *
 * Stop Roomba.
 *
 */
void stop_manual(oi_t *sensor_data) {
    uart_sendStr("\rStopping.\n\r");
    oi_setWheels(0, 0);
}

/**
 * Check bump sensors for object collision.
 *
 * 0 = No bump detected
 * 1 = Left bump
 * 2 = Right bump
 *
 */
int check_bump(oi_t *sensor_data) {
    oi_update(sensor_data);

    int bump = 0;

    if (sensor_data -> bumpLeft) {
        bump = 1;
    } else if (sensor_data -> bumpRight) {
        bump = 2;
    } else {
        bump = 0;
    }

    return bump;
}

/**
 * Check cliff sensors for boundary lines.
 *
 * 0 = No boundary detected
 * 1 = Front left detected boundary
 * 2 = Front right detected boundary
 * 3 = Left detected boundary
 * 4 = Right detected boundary
 */
int check_boundary(oi_t *sensor_data) {
    oi_update(sensor_data);

    int boundary = 0;

    if (sensor_data -> cliffFrontLeftSignal > 2700) {
        boundary = 1;
    } else if (sensor_data -> cliffFrontRightSignal > 2700) {
        boundary = 2;
    } else if (sensor_data -> cliffLeftSignal > 2700) {
        boundary = 3;
    } else if (sensor_data -> cliffRightSignal > 2700) {
        boundary = 4;
    } else {
        boundary = 0;
    }

    return boundary;
}

/**
 *
 * Check cliff sensors for holes.
 *
 * 0 = No cliff detected
 * 1 = Front left cliff detected
 * 2 = Front right cliff detected
 * 3 = Left cliff detected
 * 4 = Right cliff detected
 *
 */
int check_cliff(oi_t *sensor_data) {
    oi_update(sensor_data);

    int cliff = 0;

    if (sensor_data -> cliffFrontLeft) {
        cliff = 1;
    } else if (sensor_data -> cliffFrontRight) {
        cliff = 2;
    } else if (sensor_data -> cliffLeft) {
        cliff = 3;
    } else if (sensor_data -> cliffRight) {
        cliff = 4;
    } else {
        cliff = 0;
    }

    return cliff;
}

/**
 *
 * Complete a 180 degree sweep with IR sensor and ADC.
 *
 */
void ir_sweep(oi_t *sensor_data) {
   int angle = 0;
   double distance;
   char data[200] = {};

   for (angle = 0; angle < 180; angle += 2) {
       distance = ir_scan(angle);

       // Throw away distances that are too far.
       if (distance > 55.0) {
           continue;
       }

       sprintf(data, "\rDistance (in cm): %.2lf\t\tAngle: %d\n\r", distance, angle);
       uart_sendStr(data);
   }
}

/**
 *
 * Complete a 180 degree sweep with PING sensor and Timer.
 *
 */
void ping_sweep(oi_t *sensor_data) {
    int angle = 0;
    double distance;
    char data[200] = {};

    for (angle = 0; angle < 180; angle += 2) {
        distance = ping_scan(angle);

        // Throw away distances that are too far or overflow.
        if (distance > 85.0) {
            continue;
        }

        sprintf(data, "\rDistance (in cm): %.2lf\t\tAngle: %d\n\r", distance, angle);
        uart_sendStr(data);
    }
}

/**
 *
 * Scan with PING and IR sensors.
 *
 */
void ir_ping_scan(void) {
    int angle = 0;
    double ping_distance;
    double ir_distance;
    char data[200] = {};

    for (angle = 0; angle < 180; angle += 2) {
        ping_distance = ping_scan(angle);
        ir_distance = ir_scan(angle);

        // Throw away distances that are too far or overflow.
        if (ping_distance > 85.0 || ir_distance > 55.0) {
            continue;
        }

        sprintf(data, "\rPING: %.2lf\t\tIR: %.2lf\t\tAngle: %d\r\n", ping_distance, ir_distance, angle);
        uart_sendStr(data);
    }
}

void object_detect(void) {
    char data[100];
    obj objects[40] = {};

    int adc_val = 0; // Raw ADC digital value scanned in by bot.
    int adc_sum = 0;
    int adc_sample = 0;

    double estimated_dist_val = 0;
    double estimated_dist_sum = 0;
    double estimated_dist = 0;

    double ping_distance;

    int angle = 0;
    int avg_count = 0;
    int n = 0;
    int i = 0;

    for (angle = 0; angle < 180; angle += 2) {
        servo_move(angle);

        for (i = 0; i < 16; i++) {
            adc_val = adc_read(); // Get raw ADC value.

            estimated_dist_val = 3570082.11707347 / pow((double)adc_val, 1.60513643); // Estimate distance in cm given raw ADC value. FIXME: specific to bot?

            adc_sum += adc_val;
            estimated_dist_sum += estimated_dist_val;

            avg_count++;
        }

       adc_sample = adc_sum / avg_count; // Average ADC values.
       estimated_dist = estimated_dist_sum / avg_count; // Average distance values.

       timer_waitMillis(200); // Wait.

       ping_distance = ping_scan(angle);

       // Throw away distances that are too far or overflow.
       if (ping_distance > 85.0 || estimated_dist > 55.0) {
           continue;
       }

       if (adc_sample > 1055 && adc_sample < 1700) { // Stores objects with IR value into array.
           objects[n].raw_ir = adc_sample;
           objects[n].ir_dist = estimated_dist;
           objects[n].ping_dist = ping_distance;
           objects[n].angle = angle;
           objects[n].num = n;
       } else {
           objects[n].raw_ir = 0;
           objects[n].ir_dist = estimated_dist;
           objects[n].ping_dist = ping_distance;
           objects[n].angle = angle;
           objects[n].num = n;
       }

       sprintf(data, "\rPING: %.2lf cm\t\tIR: %.2lf cm\t\tAngle: %d\r\n", ping_distance, estimated_dist, angle);
       uart_sendStr(data);

       // Reset variables.
       adc_sample = 0;
       adc_sum = 0;
       estimated_dist = 0;
       estimated_dist_sum = 0;
       avg_count = 0;

       n++;
   }
}

/**
 *
 * Detects collisions and navigates around objects.
 * FIXME: Needs updated
 *
 */
double collision_detect(oi_t *sensor_data, double distance_cm, double degLeft, double degRight, double back, double lat) {
    double sum = 0;
    int checkLeft = 0;
    int checkRight = 0;
    int collision = 0;
    char data[200] = {};

    while (sum < distance_cm) {

        oi_setWheels(75, 75);
        oi_update(sensor_data);
        sum += sensor_data -> distance;

        /////////////// FIXME: DELETE LATER ////////////////
        sprintf(data, "Distance (in cm): %lf\n\r", sum);
        uart_sendStr(data);
        /////////////// DELETE LATER ////////////////

        // Check bump sensors.
        if (check_bump(sensor_data) == 1) {
            checkLeft = 1;
        }

        if (check_bump(sensor_data) == 2) {
            checkRight = 1;
        }

        // If object is on left side, navigate around.
        if (checkLeft == 1) {
            collision = 1;
            oi_setWheels(0, 0);
            timer_waitMillis(300);

            move_backward(sensor_data, back); // Move backward back distance.
            sum -= 150;
            oi_setWheels(0, 0);
            timer_waitMillis(300);
            turn_right(sensor_data, degRight + 25); // Turn right.
            timer_waitMillis(300);
            move_forward(sensor_data, lat); // Move forward lateral distance.
            oi_setWheels(0, 0);
            timer_waitMillis(300);
            turn_left(sensor_data, degLeft); // Turn left.

            break;
         // Or if object is on right side, navigate around.
         } else if (checkRight == 1) {
            collision = 1;
            oi_setWheels(0, 0);
            timer_waitMillis(300);

            move_backward(sensor_data, back); // Move backward back distance.
            sum -= 150;
            oi_setWheels(0, 0);
            timer_waitMillis(300);
            turn_left(sensor_data, degLeft - 25); // Turn left.
            timer_waitMillis(300);
            move_forward(sensor_data, lat); // Move forward lateral distance.
            oi_setWheels(0, 0);
            timer_waitMillis(300);
            turn_right(sensor_data, degRight); // Turn right.

            break;
          } else {
                collision = 0;
          }
    }

    oi_setWheels(0, 0);

    return collision;
}




