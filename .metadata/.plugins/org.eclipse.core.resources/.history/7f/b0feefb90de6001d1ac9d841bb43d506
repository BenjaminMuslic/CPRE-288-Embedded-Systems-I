#include <stdio.h>
#include <string.h>

#include "Timer.h"
#include "lcd.h"
#include "functions.h"
#include "open_interface.h"
#include "uart-interrupt.h"
#include "ping_template.h"
#include "servo.h"

#define RADAR_RADIUS 20
#define THRESHOLD_DISTANCE 100
//#include "uart.h"

//static oi_t* sensor_data;

int bump, boundary, cliff;

//void initialize_system() {
//  uart_interrupt_init();
//  oi_t* sensor_data = oi_alloc();  // do this only once at start of main()
//  oi_init(sensor_data);
//  timer_init();
//  timer_init2();
//  servo_initalize();
//  lcd_init();
//  ping_initalize();
//}
//typedef struct
//{
//    int angle;
//    int distance;
//} ObjectPosition;
typedef struct {
    int raw_ir;
    double ir_dist;
    double ping_dist;
    int angle;
    int num;
} obj;


void move_forward(oi_t *sensor_data)
{
    uart_sendStr("Forward \n\r");
    oi_setWheels(100, 100);
    timer_waitMillis(1500);
    oi_setWheels(0, 0);
    int br = 0;

    while (br == 0)
    {
        oi_update(sensor_data);

        // If UART receives key other than 'W', go back to main.
        if (command_flag != 2)
        {
            br = 1;
            return command_flag;
        }

        else
        {
            // Check for bumps.
            bump = check_bump(sensor_data);

            if (bump == 1)
            {
                oi_setWheels(0, 0);
                char *warning = ("Hit on left bumper!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (bump == 2)
            {
                oi_setWheels(0, 0);
                char *warning = ("Hit on right bumper!\n\r");
                uart_sendStr(warning);
                br = 1;
            }

            // Check for boundaries.
            boundary = check_boundary(sensor_data);

            if (boundary == 1)
            {
                oi_setWheels(0, 0);
                char *warning = ("Boundary line on front left side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (boundary == 2)
            {
                oi_setWheels(0, 0);
                char *warning = ("Boundary line on front right side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (boundary == 3)
            {
                oi_setWheels(0, 0);
                char *warning = ("Boundary line on left side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (boundary == 4)
            {
                oi_setWheels(0, 0);
                char *warning = ("Boundary line on right side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }

            // Check for cliffs.
            cliff = check_cliff(sensor_data);

            if (cliff == 1)
            {
                oi_setWheels(0, 0);
                char *warning = ("Cliff on front left side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (cliff == 2)
            {
                oi_setWheels(0, 0);
                char *warning = ("Cliff on front right side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (cliff == 3)
            {
                oi_setWheels(0, 0);
                char *warning = ("Cliff on left side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (cliff == 4)
            {
                oi_setWheels(0, 0);
                char *warning = ("Cliff on right side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
        }
        command_flag = 0;
    }
}

void turn_left()
{
    uart_sendStr("Left \n\r");
    oi_setWheels(100, -100);
    timer_waitMillis(300);
    oi_setWheels(0, 0);
}

void turn_right()
{
    uart_sendStr("Right \n\r");
    oi_setWheels(-100, 100);
    timer_waitMillis(300);
    oi_setWheels(0, 0);
}

void move_reverse()
{
    uart_sendStr("Reverse \n\r");
    oi_setWheels(-100, -100);
    timer_waitMillis(1000);
    oi_setWheels(0, 0);
}

void begin_ping_timer_scan()
{
    oi_setWheels(0, 0);
    lcd_printf("PING SCAN\n");
    uart_sendStr("PING SCAN \n\r");
    ping_sweep();
}

void begin_IR_ADC_scan(){
    oi_setWheels(0, 0);
    lcd_printf("IR and ADC SCAN\n");
    uart_sendStr("IR and ADC SCAN \n\r");
    ir_sweep();
}

void begin_double_scan(){
    oi_setWheels(0,0);
    lcd_printf("IR and PING SCAN");
    uart_sendStr("IR and PING SCAN");
    ir_ping_scan();
}

void emergency_brake()
{
    uart_sendStr("Emergency Brake \n\r");
    oi_setWheels(0, 0);
}

void boost(oi_t *sensor_data)
{
    uart_sendStr("NITROUS ARMED \n\r");
    oi_setWheels(500, 500);
    timer_waitMillis(750);
    oi_setWheels(0, 0);
    int br = 0;

    while (br == 0)
    {
        oi_update(sensor_data);

        // If UART receives key other than 'W', go back to main.
        if (command_flag != 8)
        {
            br = 1;
            return command_flag;
        }
        else
        {
            // Check for bumps.
            bump = check_bump(sensor_data);

            if (bump == 1)
            {
                oi_setWheels(0, 0);
                char *warning = ("Hit on left bumper!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (bump == 2)
            {
                oi_setWheels(0, 0);
                char *warning = ("Hit on right bumper!\n\r");
                uart_sendStr(warning);
                br = 1;
            }

            // Check for boundaries.
            boundary = check_boundary(sensor_data);

            if (boundary == 1)
            {
                oi_setWheels(0, 0);
                char *warning = ("Boundary line on front left side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (boundary == 2)
            {
                oi_setWheels(0, 0);
                char *warning = ("Boundary line on front right side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (boundary == 3)
            {
                oi_setWheels(0, 0);
                char *warning = ("Boundary line on left side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (boundary == 4)
            {
                oi_setWheels(0, 0);
                char *warning = ("Boundary line on right side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }

            // Check for cliffs.
            cliff = check_cliff(sensor_data);

            if (cliff == 1)
            {
                oi_setWheels(0, 0);
                char *warning = ("Cliff on front left side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (cliff == 2)
            {
                oi_setWheels(0, 0);
                char *warning = ("Cliff on front right side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (cliff == 3)
            {
                oi_setWheels(0, 0);
                char *warning = ("Cliff on left side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
            else if (cliff == 4)
            {
                oi_setWheels(0, 0);
                char *warning = ("Cliff on right side!\n\r");
                uart_sendStr(warning);
                br = 1;
            }
        }
        command_flag = 0;
    }

}

//void scan_for_obstacles(void) {
//  // TODO scan obstacles without cyBOT_scan library
//  timer_waitMillis(1000);
//  int distance = -1;
//  int i = 1;
//  servo_move(1);
//  timer_waitMillis(50);
//  char data[180] = {};
//  for (i = 0; i < 180; i+=2) {
//    distance = scan(i);
//
//
//    //need to check if there is a object. if so print obect and angle
//    if(distance < 35){
////        sprintf(data, "%i:%dcm  \n\r", i, distance);
//         sprintf(data,"Obstacle at: %dcm %i degrees\n\r",distance,i);
//
//    }
////    if (i == 90) {
////      sprintf(data, "\n\rMIDDLE:  %i:%dcm \n\r", i, distance);
////    }
//
//    uart_sendStr(data);
//  }
//}

//    // Display objects
//    for (i = 0; i < object_count; i++)
//    {
//        sprintf(data, "Object %d: Angle %d Distance %dcm\n\r", i + 1,
//                object_positions[i].angle, object_positions[i].distance);
//        uart_sendStr(data);
//    }
//}

/**
 * Check bump sensors for object collision.
 *
 * 0 = No bump detected
 * 1 = Left bump
 * 2 = Right bump
 *
 */
int check_bump(oi_t *sensor_data)
{
    oi_update(sensor_data);

    int bump = 0;

    if (sensor_data->bumpLeft)
    {
        bump = 1;
    }
    else if (sensor_data->bumpRight)
    {
        bump = 2;
    }
    else
    {
        bump = 0;
    }

    return bump;
}
/**
 * Check cliff sensors for boundary lines.
 *
 * 0 = No boundary detected
 * 1 = Front left detected boundary
 * 2 = Front right detected boundary
 * 3 = Left detected boundary
 * 4 = Right detected boundary
 */
int check_boundary(oi_t *sensor_data)
{
    oi_update(sensor_data);

    int boundary = 0;

    if (sensor_data->cliffFrontLeftSignal > 2700)
    {
        boundary = 1;
    }
    else if (sensor_data->cliffFrontRightSignal > 2700)
    {
        boundary = 2;
    }
    else if (sensor_data->cliffLeftSignal > 2700)
    {
        boundary = 3;
    }
    else if (sensor_data->cliffRightSignal > 2700)
    {
        boundary = 4;
    }
    else
    {
        boundary = 0;
    }

    return boundary;
}

/**
 *
 * Check cliff sensors for holes.
 *
 * 0 = No cliff detected
 * 1 = Front left cliff detected
 * 2 = Front right cliff detected
 * 3 = Left cliff detected
 * 4 = Right cliff detected
 *
 */
int check_cliff(oi_t *sensor_data)
{
    oi_update(sensor_data);

    int cliff = 0;

    if (sensor_data->cliffFrontLeft)
    {
        cliff = 1;
    }
    else if (sensor_data->cliffFrontRight)
    {
        cliff = 2;
    }
    else if (sensor_data->cliffLeft)
    {
        cliff = 3;
    }
    else if (sensor_data->cliffRight)
    {
        cliff = 4;
    }
    else
    {
        cliff = 0;
    }

    return cliff;
}

//int scan(int angle)
//{
//    int distance;
//    servo_move(angle);
//    timer_waitMillis(40);
////    int j = 0;
////    for (j = 0; j < 5; j++)
////    {
//        ping_pulse_trigger();
//        distance = ping_read();
////        timer_waitMillis(15);
////    }
//
//    return distance;
//}

/**
 *
 * Complete a 180 degree sweep with IR sensor and ADC.
 *
 */
void ir_sweep(oi_t *sensor_data) {
   int angle = 0;
   double distance;
   char data[200] = {};

   for (angle = 0; angle < 180; angle += 2) {
       distance = ir_scan(angle);

       // Throw away distances that are too far.
       if (distance > 55.0) {
           continue;
       }

       sprintf(data, "\rDistance (in cm): %.2lf\t\tAngle: %d\n\r", distance, angle);
       uart_sendStr(data);
   }
}

/**
 *
 * Complete a 180 degree sweep with PING sensor and Timer.
 *
 */
void ping_sweep(oi_t *sensor_data) {
    int angle = 0;
    double distance;
    char data[200] = {};

    for (angle = 0; angle < 180; angle += 2) {
        distance = ping_scan(angle);

        // Throw away distances that are too far or overflow.
        if (distance > 85.0) {
            continue;
        }

        sprintf(data, "\rDistance (in cm): %.2lf\t\tAngle: %d\n\r", distance, angle);
        uart_sendStr(data);
    }
}

/**
 *
 * Scan with PING and IR sensors.
 *
 */
void ir_ping_scan(void) {
    int angle = 0;
    double ping_distance;
    double ir_distance;
    char data[200] = {};

    for (angle = 0; angle < 180; angle += 2) {
        ping_distance = ping_scan(angle);
        ir_distance = ir_scan(angle);

        // Throw away distances that are too far or overflow.
        if (ping_distance > 85.0 || ir_distance > 55.0) {
            continue;
        }

        sprintf(data, "\rPING: %.2lf\t\tIR: %.2lf\t\tAngle: %d\r\n", ping_distance, ir_distance, angle);
        uart_sendStr(data);
    }
}

void object_detect(void) {
    char data[100];
    obj objects[40] = {};

    int adc_val = 0; // Raw ADC digital value scanned in by bot.
    int adc_sum = 0;
    int adc_sample = 0;

    double estimated_dist_val = 0;
    double estimated_dist_sum = 0;
    double estimated_dist = 0;

    double ping_distance;

    int angle = 0;
    int avg_count = 0;
    int n = 0;
    int i = 0;

    for (angle = 0; angle < 180; angle += 2) {
        servo_move(angle);

        for (i = 0; i < 16; i++) {
            adc_val = adc_read(); // Get raw ADC value.

            estimated_dist_val = 3570082.11707347 / pow((double)adc_val, 1.60513643); // Estimate distance in cm given raw ADC value. FIXME: specific to bot?

            adc_sum += adc_val;
            estimated_dist_sum += estimated_dist_val;

            avg_count++;
        }

       adc_sample = adc_sum / avg_count; // Average ADC values.
       estimated_dist = estimated_dist_sum / avg_count; // Average distance values.

       timer_waitMillis(200); // Wait.

       ping_distance = ping_scan(angle);

       // Throw away distances that are too far or overflow.
       if (ping_distance > 85.0 || estimated_dist > 55.0) {
           continue;
       }

       if (adc_sample > 1055 && adc_sample < 1700) { // Stores objects with IR value into array.
           objects[n].raw_ir = adc_sample;
           objects[n].ir_dist = estimated_dist;
           objects[n].ping_dist = ping_distance;
           objects[n].angle = angle;
           objects[n].num = n;
       } else {
           objects[n].raw_ir = 0;
           objects[n].ir_dist = estimated_dist;
           objects[n].ping_dist = ping_distance;
           objects[n].angle = angle;
           objects[n].num = n;
       }

       sprintf(data, "\rPING: %.2lf cm\t\tIR: %.2lf cm\t\tAngle: %d\r\n", ping_distance, estimated_dist, angle);
       uart_sendStr(data);

       // Reset variables.
       adc_sample = 0;
       adc_sum = 0;
       estimated_dist = 0;
       estimated_dist_sum = 0;
       avg_count = 0;

       n++;
   }
}



// Add other helper functions here

